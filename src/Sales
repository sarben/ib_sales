A large company with locations in different cities has taken an OOP approach in creating an
administration program that manages all aspects of its business. These aspects include:
the sale of all of the different products that the company manages, the salaries for managers, office staff and sales personnel.

1. By making use of an example from the above scenario, distinguish between a class and an instantiation of a class.	[3]
    A class called salary should contain a method to calculate salary, and an instance would be the manager, staff, and personnel.

2. The different modules in the program each open up a graphical user interface (GUI). Each GUI has a similar design, but contains differences specific to each module.
By giving two examples, explain how the principles of inheritance can be incorporated into the design of this administration program.	[4]
    Each module can inherit from a master module, but the individuals will contain specific functions pertaining to their GUIs that differ and therefore override the master module class.
    Examples: 1.) The SalePerson class is a parent for the getCount() and getId() methods.
              2.) The Sales constructor is a parent for the getQuantity() method.

3. Describe how the use of libraries can facilitate the development of programs like this company's administration program.	[3]
    A library, or collection of classes, allows the developer to organize the diferent classes so that certain classes inherit from others, but some classes do not.

4. The company employs several sales personnel to sell its products to different retailers. Each branch of the company keeps track of its own sales with a suite of programs that include the two classes SalesPerson and Sales.

Each instance variable is initialized when a SalesPerson object is instantiated.
5. Complete the constructor public SalesPerson (String id),from the SalesPerson class.

6. Explain why accessor methods are necessary for the SalesPerson class.	[3]
The accessor methods are necessary in order to get private variables.

//7. Construct unified modelling language (UML) diagrams to clearly show the relationship between the SalesPerson and sales classes.  Note: There is no need to include mutator or accessor methods or a constructor.	[4]

8. Outline a negative effect that a future change in the design of the sales object might have on this suite of programs.	[2]
A change in Sales would alter its dependencies (ie SalesPerson its methods such as calcTotalSales). If the variables are altered, the dependent objects and methods will not work.

The company employs several sales personnel. The different salesperson objects are held in the array salesPeople.
The Main class contains various methods that operate on the SalesPerson and sales
classes. The array salesPeople is declared globally. The Main class contains the following code:

9. State the output after running this code.	[4]
2550.4

10. Construct the method calcTotalSales( ) , in the Sales Person class that calculates the total value of the sales for a specific SalesPerson object.	[5]

The salesPeople array contains '100' instantiated objects. The company wishes to reward the salesperson whose sales have the largest total value.

11. By making use of any previously written methods, construct the method highest ( ) , that returns the ID of the salesperson whose sales have the largest total value.	[5]

12. Construct the method addSales (Sales s, String id) , in the Main class, that will add a new Sales object s, to the salesperson with a specified ID.
Note: You can assume that the ID is a valid one.	[4]

A further class in this suite of programs is the Payroll class. This class is run at the end
of each month to calculate each salesperson's salary, which is based on the sales that have been made during that month.

13. Suggest changes that must be made to the salesperson class and/or the Sales class to allow these calculations to be made.	[3]
There must exist a method to calculate the total sales per person and multiply it by the salary per sale for each salesperson.

14. Discuss the use of polymorphism that occurs in this suite of programs.	[3]
Various types (ie strings, integers and objects) and classes (such as Salesperson and Sales) are able to be processed through a uniform interface.